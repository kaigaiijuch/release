#!/usr/bin/env bash

set -eu -o pipefail
set -C # Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing files.

if [[ "${TRACE-0}" == "1" ]]; then
    set -vx
fi

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    echo 'Usage: ./script.sh arg-one arg-two

This is an awesome bash script to make your life better.

'
    exit
fi

APP_ROOT="$(dirname "$0")"/../
cd $APP_ROOT

REPOS_DIR=${REPOS_DIR:-repos}

WEBSITE_REPO_NAME=${WEBSITE_REPO_NAME:-kaigaiijuch/website}
PAGES_REPO_NAME=${PAGES_REPO_NAME:-kaigaiijuch/kaigaiijuch.github.io}
pages_repo_dir=${REPOS_DIR}/${PAGES_REPO_NAME##*/}

main() {
    echo "### fetching pages repo... $PAGES_REPO_NAME"
    bin/fetch_repo $PAGES_REPO_NAME

    echo
    echo "### download website data..."
    download_dir=$APP_ROOT/tmp/website
    if [[ -d $download_dir ]]; then
        rm -rf $download_dir
    fi
    mkdir -p $download_dir
    gh run download --repo $WEBSITE_REPO_NAME -n public_files --dir $download_dir

    echo
    echo "### copy all downloaded files to pages repo... $pages_repo_dir/docs"
    rsync -avL $download_dir/ $pages_repo_dir/docs/

    echo
    echo "### commiting changes..."
    tag=$(date +%Y%m%d-%H%M%S%Z)

    cd $pages_repo_dir
    git checkout -b $tag
    git add .
    git commit -m "update website data $tag"

    echo
    echo "### pushing changes..."
    git push -u origin $tag

    echo
    echo "### making pull-request..."
    gh_pr_output=$(gh pr create -b "please have a look @kaigaiijuch/admin by @kaigaiijuch-bot" --head $tag --title "update website data $tag") && echo "$gh_pr_output"
    pr_url=$(echo "$gh_pr_output" | grep -o 'https://github.com[^ ]*')
    open $pr_url
}

main "$@"

# styleguide | Style guides for Google-originated open-source projects https://google.github.io/styleguide/shellguide.html
# Shell Script Best Practices — The Sharat's https://sharats.me/posts/shell-script-best-practices/
